// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
  owner
}

model Users {
  id           Int      @id @default(autoincrement())
  username     String   @unique @db.VarChar(50)
  email        String   @unique @db.VarChar(100)
  password     String   @db.VarChar(100)
  role         Role     @default(user)
  phone_number String   @db.VarChar(20)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  ticketUsages TicketUsage[]
}

model Specie {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(50)
  description String   @db.Text()
  createdAt   DateTime @default(now())
  updateAt    DateTime @default(now()) @updatedAt

  @@map("fish_species")
}

enum Status {
  available
  unavailable
}

model Fishing {
  id             Int      @id @default(autoincrement())
  name           String   @db.VarChar(50)
  description    String   @db.Text()
  price_per_hour Decimal  @db.Decimal()
  image          String   @db.VarChar(100)
  status         Status
  createdAt      DateTime @default(now())
  updateAt       DateTime @default(now()) @updatedAt

  @@map("fishing")

  tickets        tickets[]        // sudah ada di relasi dari tickets
  ticketUsages   TicketUsage[]  // tambahkan ini
}
enum StatusTickets {
  unused
  used
  expired
}

model tickets {
  id               Int           @id @default(autoincrement())
  ticket_code      String        @db.VarChar(10)
  fishing_spot_id  Int
  fishing_spot     Fishing       @relation(fields: [fishing_spot_id], references: [id])
  valid_date       DateTime
  status           StatusTickets
  duration_minutes Int
  created_at       DateTime      @default(now())

  @@map("tickets")

  ticketUsages     TicketUsage[]  // tambahkan ini
}
model TicketUsage {
  id            Int      @id @default(autoincrement())
  userId        Int
  ticketId      Int
  usedAt        DateTime
  durationUsed  Int
  fishingSpotId Int

  // Relasi
  user         Users   @relation(fields: [userId], references: [id])
  ticket       tickets @relation(fields: [ticketId], references: [id])
  fishingSpot  Fishing @relation(fields: [fishingSpotId], references: [id])

  @@map("ticket_usages")
}
